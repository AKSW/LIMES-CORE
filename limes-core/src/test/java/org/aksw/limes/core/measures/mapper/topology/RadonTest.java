/*
 * LIMES Core Library - LIMES – Link Discovery Framework for Metric Spaces.
 * Copyright © 2011 Data Science Group (DICE) (ngonga@uni-paderborn.de)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.aksw.limes.core.measures.mapper.topology;

import org.aksw.limes.core.measures.mapper.pointsets.Polygon;
import org.junit.Test;

import java.util.Arrays;
import java.util.HashSet;

import static org.aksw.limes.core.measures.mapper.pointsets.OrchidMapper.getPoints;

public class RADONTest {

	@Test
	public void test() {
		double t1=System.currentTimeMillis();

		String polygonA, polygonB, relation;

		polygonA = "POLYGON ((6.475135050000034 49.82119375000002, 6.233855050000045 49.90005875000003, 6.17582905000009 50.23541975, 6.404276050000021 50.32382825000002, 6.206844550000056 50.52040475000004, 6.274047050000064 50.630138250000016, 5.975471550000037 50.80208625000003, 6.085720050000077 50.911545250000074, 5.876824550000066 51.03199325000003, 6.176985550000097 51.18510975000004, 6.072570050000053 51.24258775000001, 6.223924050000107 51.36632775000004, 5.962557550000042 51.8370017500001, 6.788939550000038 51.92955425000005, 6.688049050000046 52.03993275, 7.065755550000063 52.24128325, 6.992069050000026 52.46714425000002, 6.681316050000049 52.553645750000044, 7.005988050000042 52.63862575000002, 7.301952450000073 53.323293, 6.997709450000059 53.369926, 7.031714950000094 53.534133500000024, 7.809480950000051 53.707843500000024, 8.297383950000096 53.43052, 8.309427950000071 53.616342, 8.559582950000049 53.50961750000002, 8.492878450000092 53.708898, 8.613092450000039 53.88203650000003, 9.129677201526038 53.86241140214403, 8.80367895000009 54.02430350000003, 8.947896950000029 54.033573, 8.844804450000026 54.26632850000004, 8.57999895000006 54.30303250000006, 9.018820450000021 54.474654, 8.82645595 54.462346, 8.887097450000084 54.60751950000005, 8.597173950000041 54.883246, 8.280792950000091 54.795929, 8.387889450000074 55.04559550000002, 8.362683950000019 54.928216, 9.957841450000075 54.779242, 10.033721450000058 54.67226249999999, 9.605247950000063 54.526738, 10.031500950000037 54.636174, 9.842433450000073 54.473712, 10.17350545000005 54.3457845, 11.11225895000004 54.39901150000003, 11.093514450000043 54.19749150000001, 10.751935950000046 54.037797500000096, 10.905765950000017 53.95710250000002, 11.479405950000057 53.938743, 11.379032950000038 53.998364500000065, 12.102448450000054 54.17824550000003, 12.525692950000035 54.473088500000046, 12.828502950000058 54.42173450000004, 12.377495950000053 54.26130650000002, 13.029801450000093 54.394660500000015, 13.44829045000003 54.102173, 13.696801950000037 54.15552, 13.88397545 53.94469950000001, 13.815155450000077 53.84879, 14.271742950000032 53.73909150000003, 14.412157050000047 53.32963625000002, 14.144843050000048 52.86363875, 14.635371050000032 52.49441175000004, 14.534362050000055 52.395008250000046, 14.755227050000087 52.070024750000016, 14.59015405000008 51.83814425000003, 14.951674050000065 51.46907625000006, 14.96439655000006 51.05499275, 14.823362050000014 50.87055025, 14.618829550000044 50.85781275000002, 14.59916405000007 50.98712075000006, 14.317874050000057 51.054699250000084, 14.401339050000075 50.925524250000024, 12.948144550000052 50.40431125000006, 12.583778550000062 50.407079250000066, 12.333215050000092 50.171542250000016, 12.100199050000043 50.318327750000066, 12.55101055000003 49.90508575000007, 12.401899550000024 49.75839225000004, 12.633817550000032 49.476158250000054, 13.839703050000054 48.77145425000003, 13.727576550000038 48.51302725000005, 13.513370050000105 48.59098375000005, 13.412939050000062 48.37652925000009, 12.751465050000093 48.11279725000003, 13.004294550000026 47.84524125000004, 12.905405050000041 47.723411750000025, 13.08032305000009 47.68716475000002, 13.046097050000043 47.520507750000064, 12.24961705000004 47.74136775000002, 12.204958050000045 47.60751325000004, 11.016608050000087 47.396446750000024, 10.886301550000098 47.536781750000046, 10.454376050000064 47.55575175000004, 10.436756050000042 47.38032875000005, 10.178269550000067 47.27012625000003, 10.23615655000006 47.381759250000044, 10.099849550000073 47.35474025000002, 9.968072050000103 47.54620025000008, 9.56133655000005 47.50012625000002, 8.613831550000043 47.801078750000016, 8.406042050000025 47.67322625000003, 8.595710050000093 47.60572825000003, 7.636014550000056 47.56050075000002, 7.57788805000007 48.121406250000035, 7.802610050000055 48.58958475000003, 8.232571550000074 48.96650675, 6.723205550000046 49.21894475000002, 6.367102550000055 49.469482750000054, 6.475135050000034 49.82119375000002))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		polygonB = "POLYGON ((13.350383450000066 54.268775, 13.123990450000036 54.3609755, 13.262609450000042 54.382905, 13.142786450000074 54.5420675, 13.369705450000055 54.578378, 13.547543450000035 54.434089, 13.367629450000067 54.614921, 13.198005450000096 54.57541950000001, 13.431380450000034 54.683631, 13.421658450000024 54.57853650000007, 13.679791450000096 54.56283250000004, 13.576839450000023 54.47823950000003, 13.706617450000095 54.289795500000025, 13.350383450000066 54.268775))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonA = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonB = "POLYGON ((2 2, 3 2, 3 3, 2 3, 2 2))";
		relation = RADON.DISJOINT;
		System.out.println("Test 1: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((6.475135050000034 49.82119375000002, 6.233855050000045 49.90005875000003, 6.17582905000009 50.23541975, 6.404276050000021 50.32382825000002, 6.206844550000056 50.52040475000004, 6.274047050000064 50.630138250000016, 5.975471550000037 50.80208625000003, 6.085720050000077 50.911545250000074, 5.876824550000066 51.03199325000003, 6.176985550000097 51.18510975000004, 6.072570050000053 51.24258775000001, 6.223924050000107 51.36632775000004, 5.962557550000042 51.8370017500001, 6.788939550000038 51.92955425000005, 6.688049050000046 52.03993275, 7.065755550000063 52.24128325, 6.992069050000026 52.46714425000002, 6.681316050000049 52.553645750000044, 7.005988050000042 52.63862575000002, 7.301952450000073 53.323293, 6.997709450000059 53.369926, 7.031714950000094 53.534133500000024, 7.809480950000051 53.707843500000024, 8.297383950000096 53.43052, 8.309427950000071 53.616342, 8.559582950000049 53.50961750000002, 8.492878450000092 53.708898, 8.613092450000039 53.88203650000003, 9.129677201526038 53.86241140214403, 8.80367895000009 54.02430350000003, 8.947896950000029 54.033573, 8.844804450000026 54.26632850000004, 8.57999895000006 54.30303250000006, 9.018820450000021 54.474654, 8.82645595 54.462346, 8.887097450000084 54.60751950000005, 8.597173950000041 54.883246, 8.280792950000091 54.795929, 8.387889450000074 55.04559550000002, 8.362683950000019 54.928216, 9.957841450000075 54.779242, 10.033721450000058 54.67226249999999, 9.605247950000063 54.526738, 10.031500950000037 54.636174, 9.842433450000073 54.473712, 10.17350545000005 54.3457845, 11.11225895000004 54.39901150000003, 11.093514450000043 54.19749150000001, 10.751935950000046 54.037797500000096, 10.905765950000017 53.95710250000002, 11.479405950000057 53.938743, 11.379032950000038 53.998364500000065, 12.102448450000054 54.17824550000003, 12.525692950000035 54.473088500000046, 12.828502950000058 54.42173450000004, 12.377495950000053 54.26130650000002, 13.029801450000093 54.394660500000015, 13.44829045000003 54.102173, 13.696801950000037 54.15552, 13.88397545 53.94469950000001, 13.815155450000077 53.84879, 14.271742950000032 53.73909150000003, 14.412157050000047 53.32963625000002, 14.144843050000048 52.86363875, 14.635371050000032 52.49441175000004, 14.534362050000055 52.395008250000046, 14.755227050000087 52.070024750000016, 14.59015405000008 51.83814425000003, 14.951674050000065 51.46907625000006, 14.96439655000006 51.05499275, 14.823362050000014 50.87055025, 14.618829550000044 50.85781275000002, 14.59916405000007 50.98712075000006, 14.317874050000057 51.054699250000084, 14.401339050000075 50.925524250000024, 12.948144550000052 50.40431125000006, 12.583778550000062 50.407079250000066, 12.333215050000092 50.171542250000016, 12.100199050000043 50.318327750000066, 12.55101055000003 49.90508575000007, 12.401899550000024 49.75839225000004, 12.633817550000032 49.476158250000054, 13.839703050000054 48.77145425000003, 13.727576550000038 48.51302725000005, 13.513370050000105 48.59098375000005, 13.412939050000062 48.37652925000009, 12.751465050000093 48.11279725000003, 13.004294550000026 47.84524125000004, 12.905405050000041 47.723411750000025, 13.08032305000009 47.68716475000002, 13.046097050000043 47.520507750000064, 12.24961705000004 47.74136775000002, 12.204958050000045 47.60751325000004, 11.016608050000087 47.396446750000024, 10.886301550000098 47.536781750000046, 10.454376050000064 47.55575175000004, 10.436756050000042 47.38032875000005, 10.178269550000067 47.27012625000003, 10.23615655000006 47.381759250000044, 10.099849550000073 47.35474025000002, 9.968072050000103 47.54620025000008, 9.56133655000005 47.50012625000002, 8.613831550000043 47.801078750000016, 8.406042050000025 47.67322625000003, 8.595710050000093 47.60572825000003, 7.636014550000056 47.56050075000002, 7.57788805000007 48.121406250000035, 7.802610050000055 48.58958475000003, 8.232571550000074 48.96650675, 6.723205550000046 49.21894475000002, 6.367102550000055 49.469482750000054, 6.475135050000034 49.82119375000002))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		polygonB = "POLYGON ((13.350383450000066 54.268775, 13.123990450000036 54.3609755, 13.262609450000042 54.382905, 13.142786450000074 54.5420675, 13.369705450000055 54.578378, 13.547543450000035 54.434089, 13.367629450000067 54.614921, 13.198005450000096 54.57541950000001, 13.431380450000034 54.683631, 13.421658450000024 54.57853650000007, 13.679791450000096 54.56283250000004, 13.576839450000023 54.47823950000003, 13.706617450000095 54.289795500000025, 13.350383450000066 54.268775))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonA = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonB = "POLYGON ((2 2, 3 2, 3 3, 2 3, 2 2))";
		relation = RADON.DISJOINT;
		System.out.println("Test 2: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		polygonB = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		relation = RADON.DISJOINT;
		System.out.println("Test 3: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));


		polygonA = "POLYGON ((6.475135050000034 49.82119375000002, 6.233855050000045 49.90005875000003, 6.17582905000009 50.23541975, 6.404276050000021 50.32382825000002, 6.206844550000056 50.52040475000004, 6.274047050000064 50.630138250000016, 5.975471550000037 50.80208625000003, 6.085720050000077 50.911545250000074, 5.876824550000066 51.03199325000003, 6.176985550000097 51.18510975000004, 6.072570050000053 51.24258775000001, 6.223924050000107 51.36632775000004, 5.962557550000042 51.8370017500001, 6.788939550000038 51.92955425000005, 6.688049050000046 52.03993275, 7.065755550000063 52.24128325, 6.992069050000026 52.46714425000002, 6.681316050000049 52.553645750000044, 7.005988050000042 52.63862575000002, 7.301952450000073 53.323293, 6.997709450000059 53.369926, 7.031714950000094 53.534133500000024, 7.809480950000051 53.707843500000024, 8.297383950000096 53.43052, 8.309427950000071 53.616342, 8.559582950000049 53.50961750000002, 8.492878450000092 53.708898, 8.613092450000039 53.88203650000003, 9.129677201526038 53.86241140214403, 8.80367895000009 54.02430350000003, 8.947896950000029 54.033573, 8.844804450000026 54.26632850000004, 8.57999895000006 54.30303250000006, 9.018820450000021 54.474654, 8.82645595 54.462346, 8.887097450000084 54.60751950000005, 8.597173950000041 54.883246, 8.280792950000091 54.795929, 8.387889450000074 55.04559550000002, 8.362683950000019 54.928216, 9.957841450000075 54.779242, 10.033721450000058 54.67226249999999, 9.605247950000063 54.526738, 10.031500950000037 54.636174, 9.842433450000073 54.473712, 10.17350545000005 54.3457845, 11.11225895000004 54.39901150000003, 11.093514450000043 54.19749150000001, 10.751935950000046 54.037797500000096, 10.905765950000017 53.95710250000002, 11.479405950000057 53.938743, 11.379032950000038 53.998364500000065, 12.102448450000054 54.17824550000003, 12.525692950000035 54.473088500000046, 12.828502950000058 54.42173450000004, 12.377495950000053 54.26130650000002, 13.029801450000093 54.394660500000015, 13.44829045000003 54.102173, 13.696801950000037 54.15552, 13.88397545 53.94469950000001, 13.815155450000077 53.84879, 14.271742950000032 53.73909150000003, 14.412157050000047 53.32963625000002, 14.144843050000048 52.86363875, 14.635371050000032 52.49441175000004, 14.534362050000055 52.395008250000046, 14.755227050000087 52.070024750000016, 14.59015405000008 51.83814425000003, 14.951674050000065 51.46907625000006, 14.96439655000006 51.05499275, 14.823362050000014 50.87055025, 14.618829550000044 50.85781275000002, 14.59916405000007 50.98712075000006, 14.317874050000057 51.054699250000084, 14.401339050000075 50.925524250000024, 12.948144550000052 50.40431125000006, 12.583778550000062 50.407079250000066, 12.333215050000092 50.171542250000016, 12.100199050000043 50.318327750000066, 12.55101055000003 49.90508575000007, 12.401899550000024 49.75839225000004, 12.633817550000032 49.476158250000054, 13.839703050000054 48.77145425000003, 13.727576550000038 48.51302725000005, 13.513370050000105 48.59098375000005, 13.412939050000062 48.37652925000009, 12.751465050000093 48.11279725000003, 13.004294550000026 47.84524125000004, 12.905405050000041 47.723411750000025, 13.08032305000009 47.68716475000002, 13.046097050000043 47.520507750000064, 12.24961705000004 47.74136775000002, 12.204958050000045 47.60751325000004, 11.016608050000087 47.396446750000024, 10.886301550000098 47.536781750000046, 10.454376050000064 47.55575175000004, 10.436756050000042 47.38032875000005, 10.178269550000067 47.27012625000003, 10.23615655000006 47.381759250000044, 10.099849550000073 47.35474025000002, 9.968072050000103 47.54620025000008, 9.56133655000005 47.50012625000002, 8.613831550000043 47.801078750000016, 8.406042050000025 47.67322625000003, 8.595710050000093 47.60572825000003, 7.636014550000056 47.56050075000002, 7.57788805000007 48.121406250000035, 7.802610050000055 48.58958475000003, 8.232571550000074 48.96650675, 6.723205550000046 49.21894475000002, 6.367102550000055 49.469482750000054, 6.475135050000034 49.82119375000002))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		polygonB = "POLYGON ((13.350383450000066 54.268775, 13.123990450000036 54.3609755, 13.262609450000042 54.382905, 13.142786450000074 54.5420675, 13.369705450000055 54.578378, 13.547543450000035 54.434089, 13.367629450000067 54.614921, 13.198005450000096 54.57541950000001, 13.431380450000034 54.683631, 13.421658450000024 54.57853650000007, 13.679791450000096 54.56283250000004, 13.576839450000023 54.47823950000003, 13.706617450000095 54.289795500000025, 13.350383450000066 54.268775))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonA = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonB = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		relation = RADON.EQUALS;
		System.out.println("Test 4: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((13.350383450000066 54.268775, 13.123990450000036 54.3609755, 13.262609450000042 54.382905, 13.142786450000074 54.5420675, 13.369705450000055 54.578378, 13.547543450000035 54.434089, 13.367629450000067 54.614921, 13.198005450000096 54.57541950000001, 13.431380450000034 54.683631, 13.421658450000024 54.57853650000007, 13.679791450000096 54.56283250000004, 13.576839450000023 54.47823950000003, 13.706617450000095 54.289795500000025, 13.350383450000066 54.268775))";//"POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		polygonB ="POLYGON ((13.350383450000066 54.268775, 13.123990450000036 54.3609755, 13.262609450000042 54.382905, 13.142786450000074 54.5420675, 13.369705450000055 54.578378, 13.547543450000035 54.434089, 13.367629450000067 54.614921, 13.198005450000096 54.57541950000001, 13.431380450000034 54.683631, 13.421658450000024 54.57853650000007, 13.679791450000096 54.56283250000004, 13.576839450000023 54.47823950000003, 13.706617450000095 54.289795500000025, 13.350383450000066 54.268775))";// "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonA = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		//polygonB = "POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))";
		relation = RADON.INTERSECTS;
		System.out.println("Test 5: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((0 0, 3 0, 3 3, 0 3, 0 0))";
		polygonB = "POLYGON ((1 1, 2 1, 2 2, 1 2, 1 1))";
		relation = RADON.CONTAINS;
		System.out.println("Test 6: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((1 1, 2 1, 2 2, 1 2, 1 1))";
		polygonB = "POLYGON ((0 0, 3 0, 3 3, 0 3, 0 0))";
		relation = RADON.WITHIN;
		System.out.println("Test 7: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((1 1, 3 1, 3 3, 1 3, 1 1))";
		polygonB = "POLYGON ((0 0, 2 0, 2 2, 0 2, 0 0))";
		relation = RADON.OVERLAPS;
		System.out.println("Test 8: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		polygonA = "POLYGON ((0 2, 2 3, 3 3, 3 2, 0 2))";
		polygonB = "POLYGON ((0 0, 2 0, 2 2, 0 2, 0 0))";
		relation = RADON.TOUCHES;
		System.out.println("Test 9: " + (((RADON.getMapping((new HashSet<>(Arrays.asList(new Polygon("A", getPoints(polygonA))))), (new HashSet<>(Arrays.asList(new Polygon("Β", getPoints(polygonB))))), relation).getSize() != 0)) ? (polygonA + " " + relation + " " + polygonB) : "No Mapping."));

		System.out.println("the TIME1= "+(System.currentTimeMillis()-t1)/1000d);
	}

}
